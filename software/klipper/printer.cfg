# This file contains common pin mappings for the BigTreeTech OctoPus V1.
# To use this config, the firmware should be compiled for the STM32F446 with a "32KiB bootloader"
# Enable "extra low-level configuration options" and select the "12MHz crystal" as clock reference

# after running "make", copy the generated "klipper/out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the OctoPus with that SD card.

# See docs/Config_Reference.md for a description of parameters.

## Voron Design VORON2 250/300/350mm BigTreeTech OctoPus V1 TMC2209 UART config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths							[mcu] section
## Thermistor types						[extruder] and [heater_bed] sections - See 'sensor types' list at end of file
## Z Endstop Switch location			[safe_z_home] section
## Homing end position				[gcode_macro G32] section
## Z Endstop Switch  offset for Z0		[stepper_z] section
## Probe points							[quad_gantry_level] section
## Min & Max gantry corner postions		[quad_gantry_level] section
## PID tune								[extruder] and [heater_bed] sections
## Fine tune E steps					[extruder] section

[mcu]
##	[X in MOTOR0] - B Motor
##	[Y in MOTOR1] - A Motor
##	[E in MOTOR6] - Extruder
##	Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_0B003400165053424E363620-if00
##   The serial port to connect to the MCU. If unsure (or if it
##   changes) see the "Where's my serial port?" section of the FAQ.
##   This parameter must be provided when using a serial port.

restart_method: command
##   This controls the mechanism the host will use to reset the
##   micro-controller. The choices are 'arduino', 'cheetah', 'rpi_usb',
##   and 'command'. The 'arduino' method (toggle DTR) is common on
##   Arduino boards and clones. The 'cheetah' method is a special
##   method needed for some Fysetc Cheetah boards. The 'rpi_usb' method
##   is useful on Raspberry Pi boards with micro-controllers powered
##   over USB - it briefly disables power to all USB ports to
##   accomplish a micro-controller reset. The 'command' method involves
##   sending a Klipper command to the micro-controller so that it can
##   reset itself. The default is 'arduino' if the micro-controller
##   communicates over a serial port, 'command' otherwise.

[printer]
kinematics: corexy
max_velocity: 350  
max_accel: 3000    			#Max 4000
max_z_velocity: 50 			#Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 10.0

#####################################################################
# 	X/Y Stepper Settings
#####################################################################

## X Stepper on MOTOR0(B Motor)
[stepper_x]
step_pin: PF13
dir_pin: !PF12
enable_pin: !PF14
rotation_distance: 40
microsteps: 16
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: PG6
position_min: 0

position_endstop: 350
position_max: 350

homing_speed: 25   #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_x]
uart_pin: PC4
interpolate: True
run_current: 0.8
hold_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0

## Y Stepper on MOTOR1 (A Motor)
[stepper_y]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
rotation_distance: 40
microsteps: 16
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: PG9
position_min: 0

position_endstop: 350
position_max: 350

homing_speed: 25  #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_y]
uart_pin: PD11
interpolate: True
run_current: 0.8
hold_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
# 	Z Stepper Settings
#####################################################################

## Z0 Stepper - Front Left on MOTOR2_1
[stepper_z]
step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16
endstop_pin: PG10
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##	Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
#position_endstop: -0.5

position_max: 325

position_min: -5
homing_speed: 8
second_homing_speed: 3
homing_retract_dist: 3

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z]
uart_pin: PC6
interpolate: true
run_current: 0.8
hold_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##	Z1 Stepper - Rear Left on MOTOR3
[stepper_z1]
step_pin: PG4
dir_pin: !PC1
enable_pin: !PA0
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z1]
uart_pin: PC7
interpolate: true
run_current: 0.8
hold_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##	Z2 Stepper - Rear Right on MOTOR4
[stepper_z2]
step_pin: PF9
dir_pin: PF10
enable_pin: !PG2
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z2]
uart_pin: PF2
interpolate: true
run_current: 0.8
hold_current: 0.80
sense_resistor: 0.110
stealthchop_threshold: 0

##	Z3 Stepper - Front Right on MOTOR5
[stepper_z3]
step_pin: PC13
dir_pin: !PF0
enable_pin: !PF1
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z3]
uart_pin: PE4
interpolate: true
run_current: 0.8
hold_current: 0.80
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
# 	Extruder
#####################################################################

#	E0 on MOTOR6
[extruder]
step_pin: PE2
dir_pin: PE3
enable_pin: !PD4
##	Update value below when you perform extruder calibration
##	If you ask for 100mm of filament, but in reality it is 98mm:
##	rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
##  22.6789511 is a good starting point
rotation_distance: 22.6789511	#Bondtech 5mm Drive Gears
##	Update Gear Ratio depending on your Extruder Type
##	Use 50:17 for Afterburner/Clockwork (BMG Gear Ratio)
##	Use 80:20 for M4, M3.1
gear_ratio: 50:17				#BMG Gear Ratio
microsteps: 16
full_steps_per_rotation: 200	#200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.400
filament_diameter: 1.75
heater_pin: PA2
##	Validate the following thermistor type to make sure it is correct
sensor_type: ATC Semitec 104GT-2
sensor_pin: PF4
min_temp: 0
max_temp: 270
max_power: 1.0
min_extrude_temp: 170
#control = pid
#pid_kp = 26.213
#pid_ki = 1.304
#pid_kd = 131.721
##	Try to keep pressure_advance below 1.0
pressure_advance: 0.05
##	Default is 0.040, leave stock
pressure_advance_smooth_time: 0.040

##	E0 on MOTOR6
##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 extruder]
uart_pin: PE1
interpolate: false
run_current: 0.5
hold_current: 0.4
sense_resistor: 0.110
stealthchop_threshold: 0


#####################################################################
# 	Bed Heater
#####################################################################

[heater_bed]
##  The heater_bed section describes a heated bed. It uses the same
## heater settings described in the "extruder" section.
##	SSR Pin - BED_OUT
heater_pin: PA1
##   PWM output pin controlling the heater. This parameter must be
##   provided.
sensor_type: NTC 100K beta 3950
##   Type of sensor - common thermistors are "EPCOS 100K B57560G104F",
##   "ATC Semitec 104GT-2", "NTC 100K beta 3950", "Honeywell 100K
##   135-104LAG-J01", "NTC 100K MGB18-104F39050L32", "SliceEngineering
##   450", and "TDK NTCG104LH104JT1". See the "Temperature sensors"
##   section for other sensors. This parameter must be provided.
sensor_pin: PF3
##   Analog input pin connected to the sensor. This parameter must be
##   provided.

##	Adjust Max Power so your heater doesn't warp your bed
max_power: 0.6
min_temp: 0
max_temp: 120
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769

#####################################################################
# 	Probe
#####################################################################

[probe]
##	Inductive Probe
##	This probe is not used for Z height, only Quad Gantry Leveling
pin: ~PB7
x_offset: 0
y_offset: 25.0
z_offset: 0
speed: 10.0
samples: 3
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.006
samples_tolerance_retries: 3

#####################################################################
# 	Fan Control
#####################################################################

[fan]
##	Print Cooling Fan - CNC_FAN0
pin: PA8
kick_start_time: 0.5
##	Depending on your fan, you may need to increase this value
##	if your fan will not start. Can change cycle_time (increase)
##	if your fan is not able to slow down effectively
off_below: 0.10

[heater_fan hotend_fan]
##	Hotend Fan - CNC_FAN1
pin: PE5
##   Output pin controlling the fan. This parameter must be provided.
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##	If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

[heater_fan controller_fan]
##	Controller fan - CNC_FAN2
pin: PD12
#   Output pin controlling the fan. This parameter must be provided.
kick_start_time: 0.5
##   Time (in seconds) to run the fan at full speed when either first
##   enabling or increasing it by more than 50% (helps get the fan
##   spinning). The default is 0.100 seconds.
heater: heater_bed
##   Name of the config section defining the heater that this fan is
##   associated with. If a comma separated list of heater names is
##   provided here, then the fan will be enabled when any of the given
##   heaters are enabled. The default is "extruder".
heater_temp: 50.0
##   A temperature (in Celsius) that the heater must drop below before
##   the fan is disabled. The default is 50 Celsius.
fan_speed: 1.0
##   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
##   will be set to when its associated heater is enabled. The default
##   is 1.0

#####################################################################
[temperature_fan chamber]
pin: PD13 
##   Output pin controlling the fan. This parameter must be provided.
max_power: 0.8
##   The maximum power (expressed as a value from 0.0 to 1.0) that the
##   pin may be set to. The value 1.0 allows the pin to be set fully
##   enabled for extended periods, while a value of 0.5 would allow the
##   pin to be enabled for no more than half the time. This setting may
##   be used to limit the total power output (over extended periods) to
##   the fan. If this value is less than 1.0 then fan speed requests
##   will be scaled between zero and max_power (for example, if
##   max_power is .9 and a fan speed of 80% is requested then the fan
##   power will be set to 72%). The default is 1.0.
shutdown_speed: 0.0
##   The desired fan speed (expressed as a value from 0.0 to 1.0) if
##   the micro-controller software enters an error state. The default
##   is 0.
kick_start_time: 0.100
##   Time (in seconds) to run the fan at full speed when either first
##   enabling or increasing it by more than 50% (helps get the fan
##   spinning). The default is 0.100 seconds.
cycle_time:0.01
##   The amount of time (in seconds) for each PWM power cycle to the
##   fan. It is recommended this be 10 milliseconds or greater when
##   using software based PWM. The default is 0.010 seconds.
off_below:0.1
##   The minimum input speed which will power the fan (expressed as a
##   value from 0.0 to 1.0). When a speed lower than off_below is
##   requested the fan will instead be turned off. This setting may be
##   used to prevent fan stalls and to ensure kick starts are
##   effective. The default is 0.0.
##
##   This setting should be recalibrated whenever max_power is adjusted.
##   To calibrate this setting, start with off_below set to 0.0 and the
##   fan spinning. Gradually lower the fan speed to determine the lowest
##   input speed which reliably drives the fan without stalls. Set
##   off_below to the duty cycle corresponding to this value (for
##   example, 12% -> 0.12) or slightly higher.
sensor_type: NTC 100K beta 3950
##   Type of sensor - common thermistors are "EPCOS 100K B57560G104F",
##   "ATC Semitec 104GT-2", "NTC 100K beta 3950", "Honeywell 100K
##   135-104LAG-J01", "NTC 100K MGB18-104F39050L32", "SliceEngineering
##   450", and "TDK NTCG104LH104JT1". See the "Temperature sensors"
##   section for other sensors. This parameter must be provided.
sensor_pin: PF5
##   Analog input pin connected to the sensor. This parameter must be
##   provided.
min_temp: 0
max_temp: 70
##   The maximum range of valid temperatures (in Celsius) that the
##   heater must remain within. This controls a safety feature
##   implemented in the micro-controller code - should the measured
##   temperature ever fall outside this range then the micro-controller
##   will go into a shutdown state. This check can help detect some
##   heater and sensor hardware failures. Set this range just wide
##   enough so that reasonable temperatures do not result in an error.
##   These parameters must be provided.
target_temp: 50.0
##   A temperature (in Celsius) that will be the target temperature.
##   The default is 40 degrees.
control: watermark
##   Control algorithm (either pid or watermark). This parameter must
##   be provided.
gcode_id: C
##   The id to use when reporting the temperature in the M105 command.
##   This parameter must be provided.

#####################################################################
[gcode_macro M141]
default_parameter_S: 0
default_parameter_P: 0
gcode:
    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={S}

#####################################################################
# 	LED Control
#####################################################################

[output_pin caselight]
## Run-time configurable output pins 
## (one may define any number of sections with an "output_pin" prefix).
## Pins configured here will be setup as output pins and one may modify
## them at run-time using "SET_PIN PIN=my_pin VALUE=.1" type extended
## g-code commands.
## Chamber Lighting - HE1 Connector (Optional)
pin: PA3
##   The pin to configure as an output. This parameter must be
##   provided.
pwm:true
##   Set if the output pin should be capable of pulse-width-modulation.
##   If this is true, the value fields should be between 0 and 1; if it
##   is false the value fields should be either 0 or 1. The default is
##   False.
shutdown_value: 0
##   The value to set the pin to on an MCU shutdown event. The default
##   is 0 (for low voltage).
value:1
##   The value to initially set the pin to during MCU configuration.
##   The default is 0 (for low voltage).
cycle_time: 0.01
##   The amount of time (in seconds) per PWM cycle. It is recommended
##   this be 10 milliseconds or greater when using software based PWM.
##   The default is 0.100 seconds for pwm pins.

#####################################################################
# 	Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800

[safe_z_home]
##	XY Location of the Z Endstop Switch
##	Update -10,-10 to the XY coordinates of your endstop pin 
##	(such as 157,305) after going through Z Endstop Pin
##	Location Definition step.
home_xy_position:233,350
speed:100
z_hop:10

[quad_gantry_level]
##	Use QUAD_GANTRY_LEVEL to level a gantry.
##	Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
##	MAX (250, 250), (300,300), or (350,350) depending on your printer size
##	to respective belt positions

##	Gantry Corners for 350mm Build
gantry_corners:
	-60,-10
	410,420
##	Probe points
points:
	50,25
	50,275
	300,275
	300,25

speed: 100
horizontal_move_z: 10
retries: 5
retry_tolerance: 0.0075
max_adjust: 10

########################################################################
[temperature_sensor raspberry_pi]
##  Generic temperature sensors. One can define any number of additional
##  temperature sensors that are reported via the M105 command.
sensor_type: temperature_host
##  Temperature from the machine (Raspberry Pi) running the host software.
min_temp: 0
max_temp: 100

[temperature_sensor mcu_temp]
##  Generic temperature sensors. One can define any number of additional
##  temperature sensors that are reported via the M105 command.
sensor_type: temperature_mcu
##  The atsam, atsamd, and stm32 micro-controllers contain an internal
##  temperature sensor. One can use the "temperature_mcu" sensor to
##  monitor these temperatures.
min_temp: 0
max_temp: 100

#####################################################################
#   Mesh Bed Leveling
#####################################################################

[bed_mesh]
speed: 300
horizontal_move_z: 10
mesh_min: 40, 40
mesh_max: 310,310

fade_start: 0.6
fade_end: 10.0
probe_count: 7,7
algorithm: bicubic
relative_reference_index: 24


#####################################################################
# 	Macros
#####################################################################


[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G0 X175 Y175 Z30 F3600
    
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    G32                            ; home all axes
    G1 Z20 F3000                   ; move nozzle away from bed

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X125 Y250 F3600            ; park nozzle at rear
    BED_MESH_CLEAR
    
##########################################################################
[include mainsail.cfg]
######################################################################

## 	Thermistor Types
##   "EPCOS 100K B57560G104F"
##   "ATC Semitec 104GT-2"
##   "NTC 100K beta 3950"
##   "Honeywell 100K 135-104LAG-J01"
##   "NTC 100K MGB18-104F39050L32" (Keenovo Heater Pad)
##   "AD595"
##   "PT100 INA826"

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
